name: Build Plugin .TapPackage

on: [push, pull_request]

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fix tags
        if: startsWith(github.ref, 'refs/tags/v')
        run: git fetch -f origin ${{ github.ref }}:${{ github.ref }} 
      - name: Build plugin
        run: |
             cd OpenTap.Plugins.PNAX
             dotnet restore --packages bin/packages
             dotnet build -c Release --verbosity d --force --packages bin/packages
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: TapPackage
          retention-days: 14
          path: |
            OpenTap.Plugins.PNAX/bin/Release/*.TapPackage

  Publish:
    # Only publish on the main branch, the release branch, or if the commit is tagged.
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'refs/heads/release') || contains(github.ref, 'refs/tags/v')
    environment: packages.opentap.io
    runs-on: ubuntu-20.04
    # This step depends on the build step
    needs:
      - build-ubuntu
    steps:
      # Download the tap-package artifact from the Build step
      - name: Download TapPackage Arfifact
        uses: actions/download-artifact@v3
        with:
          name: TapPackage
          path: ./
      # Setup OpenTAP with the PackagePublish package in order to publish the newly created package
      - name: Setup OpenTAP
        uses: opentap/setup-opentap@v1.0
        with:
          version: 9.19.5
      - name: Install PackagePublish
        run: tap package install -f PackagePublish --version beta
      - name: Install Repository Client
        run: tap package install -v -f "Repository Client"
      - name: Display Package Installed
        run: tap package list -i
      # Publish the package. This requires the package management key to be configured in the 'PUBLIC_REPO_PASS' environment variable.
      - name: Publish
        run: tap repo upload -t ${{ secrets.NETWORKANALYZERPUBLISHTOKEN }} "*.TapPackage"
